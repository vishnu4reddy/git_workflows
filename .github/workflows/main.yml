name: Auto Resolve Conflicts and Merge PR

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - reopened

permissions:
  contents: write
  pull-requests: write

jobs:
  check-pr-and-resolve-conflict:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Fetch the main branch and PR branch
        run: |
          git fetch origin main
          git fetch origin ${{ github.head_ref }}

      - name: Update PR branch with latest changes from main
        run: |
          # Fetch latest changes from main
          git fetch origin main
          git checkout ${{ github.head_ref }}
          git rebase origin/main || exit 1

      - name: Get PR number, branch name and source branch
        run: |
          echo "PR Number: ${{ github.event.pull_request.number }}"
          echo "Source Branch: ${{ github.head_ref }}"
          echo "Target Branch: main"

      - name: Check for conflicts with main branch
        id: check_conflicts
        run: |
          # Fetch the latest changes from the main branch
          git fetch origin main

          # Checkout the PR branch (no need to create a new branch, just switch to the existing remote branch)
          git checkout ${{ github.head_ref }}

          # Allow merging unrelated histories if the branches don't share a common history
          git merge --no-ff origin/main --allow-unrelated-histories || echo "Merge conflict detected"

      - name: Handle merge conflicts if they exist
        if: failure() && steps.check_conflicts.outcome == 'failure'
        run: |
          echo "Conflicts detected, attempting to resolve them..."
          
          # Merge using 'ours' strategy to automatically resolve conflicts
          git merge --strategy=ours origin/main

          # Add all resolved files
          git add .

          # Commit the resolution
          git commit -m "Resolved conflicts with main branch"

          # Push the resolved changes back to the PR branch
          git push origin ${{ github.head_ref }}

      - name: Check if PR is behind main
        id: check_pr_status
        run: |
          # Get the commit hashes of the main and PR branches
          MAIN_COMMIT=$(git rev-parse origin/main)
          PR_COMMIT=$(git rev-parse HEAD)

          # Compare the commits to see if the PR is up-to-date with main
          if [ "$MAIN_COMMIT" != "$PR_COMMIT" ]; then
            echo "PR is not up-to-date with main. The PR is behind and should not be merged yet."
            exit 1
          else
            echo "PR is up-to-date with main. Safe to merge."
          fi

      - name: Merge PR into main branch if no conflicts and up-to-date
        if: success() && steps.check_pr_status.outcome == 'success'
        run: |
          # Checkout the main branch
          git checkout main
          
          # Pull the latest changes from main
          git pull origin main
          
          # Merge the PR branch into main
          git merge ${{ github.head_ref }}

          # Push the merged changes to the main branch
          git push origin main

      - name: Output PR information
        run: |
          echo "PR #${{ github.event.pull_request.number }} from branch ${{ github.head_ref }} has been successfully merged into main."
