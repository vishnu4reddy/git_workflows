name: Rebase Open PRs on Merge
on:
  push:
    branches:
      - main
jobs:
  rebase:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config user.name "vishnu4reddy" 
          git config user.email "vishnu4reddy@users.noreply.github.com" 

      - name: Install GitHub CLI
        run: |
          sudo apt-get install gh
        
      - name: Get list of open PRs
        id: pr_list
        run: |
          prs=$(gh pr list --state open --json number,headRefName --jq '.[] | "\(.number) \(.headRefName)"')
          echo "::set-output name=prs::$prs"
      
      - name: Debug - Show current commit history on main branch
        run: |
          echo "Fetching latest main branch history..."
          git fetch origin main
          git log --oneline --decorate --graph origin/main

      - name: Rebase each open PR
        run: |
          for pr in $(echo "${{ steps.pr_list.outputs.prs }}" | tr " " "\n")
          
          do
            pr_number=$(echo $pr | awk '{print $1}')
            pr_branch=$(echo $pr | awk '{print $2}')
            echo "$pr prs for the branch"
            echo "Rebasing PR #$pr_number ($pr_branch)"
            echo "Rebaising PR $pr_branch" 
            # Fetch the latest changes from the base branch (main)
            git fetch origin main

            # Checkout the PR branch
            git checkout $pr_branch

            # Show the commit history of the PR branch before rebase
            echo "PR $pr_number ($pr_branch) before rebase:"
            git log --oneline --decorate --graph

            # Rebase the PR branch onto main branch (without interactive)
            echo "Rebasing $pr_branch onto main branch..."
            git rebase origin/main

            # If there are conflicts during rebase, fail the job
            if [[ $(git status | grep "Unmerged paths") ]]; then
              echo "::error ::Merge conflict occurred in PR $pr_number ($pr_branch). Please resolve manually."
              exit 1
            fi

            # Show the commit history of the PR branch after rebase
            echo "PR $pr_number ($pr_branch) after rebase:"
            git log --oneline --decorate --graph

            # Force-push the rebased branch (with --force-with-lease to be safe)
            echo "Force-pushing rebased branch $pr_branch to origin..."
            git push origin $pr_branch --force-with-lease

          done

      - name: Debug - Final commit history check
        run: |
          echo "Checking final commit history after all rebases..."
          git log --oneline --decorate --graph

    env:
        GH_TOKEN: ${{ github.token }}

